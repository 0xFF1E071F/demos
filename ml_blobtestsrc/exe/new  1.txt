const char ntsc_pass1[] = ""
		"#version 330\n"
		"in vec2 vertexuv;"
		"uniform sampler2D tex;"
		"uniform vec2 resolution;"
		"uniform float framecount;\n"
		"layout(location = 0) out vec4 FragColor;\n"
		"#define TEX2D(c)texture2D(tex,(c))\n"
		"#define PI 3.14159265\n"
		"void main()"
		"{"
		"vec2 r=vertexuv,c=r*resolution*4.0001*PI/3.;"
		"c.g=1.0001*c.g+2.*PI/3.*mod(int(framecount),2);"
		"vec4 s=TEX2D(r);"
		"mat3x3 g=mat3x3(.299,-.14713,.615,.587,-.28886,-.51499,.114,.436,-.10001);"
		"vec3 v;"
		"v=g*s.rgb;"
		"float P=PI/3.;"
		"c.r=c.r*resolution.r/256.;"
		"float f=v.r+v.g*sin(c.r+c.g)+v.b*cos(c.r+c.g),x=v.r+v.g*sin(c.r+c.g+P)+v.b*cos(c.r+c.g+P);"
		"s=TEX2D(r+vec2(1./resolution.r*resolution.r/512.,0.));"
		"v=g*s.rgb;"
		"float t=v.r+v.g*sin(c.r+c.g+2.*P)+v.b*cos(c.r+c.g+2.*P),o=v.r+v.g*sin(c.r+c.g+3.*P)+v.b*cos(c.r+c.g+3.*P);"
		"FragColor=(vec4(f,x,t,o)+.65)/2.3;"
		"FragColor-=.05*clamp(sin(FragColor*1.5)*FragColor,.1,.9);"
		"}";

	const char ntsc_pass2[] = ""
		"#version 330\n"
		"in vec2 vertexuv;"
		"uniform sampler2D tex;"
		"uniform vec2 texSize;"
		"uniform float framecount;\n"
		"layout(location = 0) out vec4 FragColor;\n"
		"#define TEX2D(c)texture2D(tex,(c))\n"
		"#define PI 3.14159265\n"
		"void main()"
		"{"
		"vec2 a=vertexuv,d=fract(a*texSize),v=floor(a*texSize)+vec2(.5);"
		"a=v/texSize;"
		"v.g=-v.g-1.;"
		"float r=mod(int(framecount),2)/2.;"
		"vec4 g=(vec4(0.,.25,.5,.75)+vec4(v.r+v.g/2.+r))*4.*PI/3.,b=(vec4(0.,.25,.5,.75)+vec4(-1.+v.r+v.g/2.+r))*4.*PI/3.,c=(vec4(0.,.25,.5,.75)+vec4(1.+v.r+v.g/2.+r))*4.*PI/3.,P=sin(g),t=cos(g),e=sin(b),o=cos(b),i=sin(c),n=cos(c),f=vec4(1.);"
		"vec2 s=1./texSize;"
		"vec4 T=TEX2D(a)*2.3-.65,m=TEX2D(a+vec2(-s.r,0.))*2.3-.65,u=TEX2D(a+vec2(s.r,0.))*2.3-.65,x=TEX2D(a+2*vec2(-s.r,0.))*2.3-.65,l=TEX2D(a+2*vec2(s.r,0.))*2.3-.65;"
		"T+=m*.25-u*.25;"
		"T+=x*.125-l*.125;"
		"m-=x*.125-T*.125;"
		"u-=T*.125-l*.125;"
		"vec3 F=vec3((dot(m.ba,f.ba)+dot(T.rgb,f.rgb)+.5*(m.g+T.a))/6.,(dot(m.ba,e.ba)+dot(T.rgb,P.rgb)+.5*(m.g*e.g+T.a*P.a))/3.,(dot(m.ba,o.ba)+dot(T.rgb,t.rgb)+.5*(m.g*o.g+T.a*t.a))/3.),D=vec3((m.a*f.a+dot(T.rgba,f.rgba)+.5*(m.b+u.r))/6.,(m.a*e.a+dot(T.rgba,P.rgba)+.5*(m.b*e.b+u.r*i.r))/3.,(m.a*o.a+dot(T.rgba,t.rgba)+.5*(m.b*o.b+u.r*n.r))/3.),X=vec3((u.r*f.r+dot(T.rgba,f.rgba)+.5*(m.a+u.g))/6.,(u.r*i.r+dot(T.rgba,P.rgba)+.5*(m.a*e.a+u.g*i.g))/3.,(u.r*n.r+dot(T.rgba,t.rgba)+.5*(m.a*o.a+u.g*n.g))/3.),E=vec3((dot(u.rg,f.rg)+dot(T.gba,f.gba)+.5*(T.r+u.b))/6.,(dot(u.rg,i.rg)+dot(T.gba,P.gba)+.5*(T.r*P.r+u.b*i.b))/3.,(dot(u.rg,n.rg)+dot(T.gba,t.gba)+.5*(T.r*t.r+u.b*n.b))/3.);"
		"mat3x3 S=mat3x3(1.,1.,1.,0.,-.39465,2.03211,1.13983,-.5806,0.);"
		"if(d.r<.25)"
		"FragColor=vec4(S*F,0.);"
		"else"
		" if(d.r<.5)"
		"FragColor=vec4(S*D,0.);"
		"else"
		" if(d.r<.75)"
		"FragColor=vec4(S*X,0.);"
		"else"
		" FragColor=vec4(S*E,0.);"
		"}";

	const char ntsc_pass3[] = ""
		"#version 330\n"
		"in vec2 vertexuv;"
		"uniform sampler2D tex;"
		"uniform vec2 resolution;"
		"uniform float framecount;\n"
		"layout(location = 0) out vec4 FragColor;\n"
		"#define TEX2D(c)texture2D(tex,(c))\n"
		"void main()"
		"{"
		"mat3x3 e=mat3x3(.299,-.14713,.615,.587,-.28886,-.51499,.114,.436,-.10001),c=mat3x3(1.,1.,1.,0.,-.39465,2.03211,1.13983,-.5806,0.);"
		"vec4 v=vec4(0.);"
		"float r=3.;"
		"vec4 t=vec4(exp(-1./r/r)),x=vec4(exp(-4./r/r)),n=vec4(exp(-9./r/r)),b=vec4(exp(-16./r/r)),T=1./(vec4(1.)+vec4(2.)*(t+x+n+b));"
		"vec2 f=vertexuv;"
		"float m=1./resolution.r*4.;"
		"v+=TEX2D(f+vec2(-4.*m,0.))*b;"
		"v+=TEX2D(f+vec2(-3.*m,0.))*n;"
		"v+=TEX2D(f+vec2(-2.*m,0.))*x;"
		"v+=TEX2D(f+vec2(-1.*m,0.))*t;"
		"v+=TEX2D(f);"
		"v+=TEX2D(f+vec2(m,0.))*t;"
		"v+=TEX2D(f+vec2(2.*m,0.))*x;"
		"v+=TEX2D(f+vec2(3.*m,0.))*n;"
		"v+=TEX2D(f+vec2(4.*m,0.))*b;"
		"float s=(e*TEX2D(f).rgb).r;"
		"vec2 o=(e*(v.rgb*T.rgb)).gb;"
		"FragColor=vec4(c*vec3(s,o),1.);"
		"}";

	initShader(  (int*)&ntsc_shader[0], vertex_source, (const char*)ntsc_pass1);
	initShader(  (int*)&ntsc_shader[1], vertex_source, (const char*)ntsc_pass2);
	initShader(  (int*)&ntsc_shader[2], vertex_source, (const char*)ntsc_pass3);