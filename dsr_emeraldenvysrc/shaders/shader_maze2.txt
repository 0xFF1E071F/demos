
#ifdef GL_ES
precision mediump float;
#endif

uniform vec2 resolution;
uniform float time;
float fade = 0.65;
const float PI=3.14159;

float speed=time*0.65;
float ground_x=0.125-0.25*cos(PI*speed*0.25);
float ground_y=0.125+0.25*sin(PI*speed*0.25);
float ground_z=speed*0.125;


vec3 rotate_x(float theta, vec3 v) {
	float ct = cos(theta), st = sin(theta);
	return v * mat3(1.0, 0.0, 0.0, 0.0, ct,  -st, 0.0, st,  ct );
}

vec3 rotate_y(float theta, vec3 v) {
	float ct = cos(theta), st = sin(theta);
	return v * mat3(ct,  0.0, st,  0.0, 1.0, 0.0, -st, 0.0, ct );
}

vec3 rotate_z(float theta, vec3 v) {
	float ct = cos(theta), st = sin(theta);
	return v * mat3(ct,  -st, 0.0, st,  ct,  0.0, 0.0, 0.0, 1.0);
}


float scene(vec3 p)
	{
	float ball_p=0.25;
	float ball_w=ball_p*0.7;
	float ball=length(mod(p.xyz,ball_p)-ball_p*0.5)-ball_w;
	float hole_w=ball_p*0.65;
	float hole=length(mod(p.xyz,ball_p)-ball_p*0.5)-hole_w;
	return max(ball,-hole);
	}

 vec3 getNormal(vec3 pos) 
 { vec3 e = vec3(0.01,0.00001,0.0); 
 return normalize(vec3( scene(pos+e.yxx)-scene(pos-e.yxx),scene(pos+e.xyx)-scene(pos-e.xyx),scene(pos+e.xxy)-scene(pos-e.xxy) ) ); 
 } 
float render_scene(vec3 ray_origin, vec3 ray_dir,float t)
{
	const int ray_n=96;
	for(int i=0;i<ray_n;i++)
	{
		
		float k=scene(ray_origin+ray_dir*t);
		t+=k*fade;
	}
	return t;	
}


void main(void)
	{
	vec2 position=(gl_FragCoord.xy/resolution.xy);
	vec2 p=-1.0+2.0*position;
	//set up camera
	float speed=time*0.5;
	vec3 dir=normalize(vec3(p*vec2(1.0/resolution.y*resolution.x,1.0),0.85)); // screen ratio (x,y) fov (z)
	dir = rotate_x(PI*1.0*sin(speed*0.25),dir);
	dir = rotate_y(PI*1.0*cos(speed*0.25),dir);
	dir = rotate_z(-speed*0.2,dir);
	vec3 ray=vec3(ground_x,ground_y,ground_z);
	//the raymarch
	float t=0.0;
	t=render_scene(ray,dir,t);
	vec3 hit=ray+dir*t;
	
	//get normal for reflection
	vec3 n=getNormal(hit);
	//render reflection
	dir = normalize(refract(dir,n,.87));
		dir = normalize(refract(dir,n,.87));
	dir = reflect(dir,n); 	
	
	t+=dir;
	t=render_scene(ray,dir,t);	
	float c=(n.x*1.0+n.y+n.z)*0.5;	
	vec3 color=vec3(0.,c*t*0.125*p.x+t*0.1,c*t*0.);
	color *= 2.412;
	gl_FragColor=vec4(color,1.0);
