
gbMat4 scenes[5] =
{
	//scene 1
	1., 1., 1., 0, //cs
	0., 0., 0., 1.35, //fc /fs
	0., 0.2, 1., 1., // fu/fd/v_c
	0., 0., 0., 0.,
	//scene2
	1.4, 1.4, 1.8, 0,
	2.1, 2.1, 2.1, 1.8,
	0., .1, 1.5, 1.,
	0., 0., 0., 0.,
	//scene3
	1.4, 1.4, 1.8, 0,
	2.6, 2.6, 2.6, 1.8,
	0., .1, 1.5, 1.,
	0., 0., 0., 0.,
	//last
	1.3, 1.2, 2., 0,
	2.6, 2.6, 2.6, 2.,
	0., 0.05, 1.7, 0.,
	0., 0., 0., 0.,
	//scene 4
	1.3, 1.3, 1., 0,
    1.3, .3, .3, 1.,
	0., .05, .7, 1.1,
	0., 0., 0., 0.,
};


const char* scene1_shader = GLSL(
\n#version 430\n
layout(location = 0) out vec4 out_color;
layout(location = 1) uniform vec4 parameters;
layout(location = 2) uniform sampler2D tex;
layout(location = 3) uniform vec4 cs;
layout(location = 4) uniform vec4 fc;
layout(location = 5) uniform vec4 other;
layout(location = 6) uniform int sceneid;
float scene(vec3 f)
{
	float v = other.z;
	for (int i = 0; i <9; i++){
		f = 2.*clamp(f, -cs.xyz, cs.xyz) - f;
		float c = max(fc.w / dot(f, f), 1.);
		f *= c;
		v *= c;
		f += fc.xyz;
	}
	float z = length(f.xy) - other.x;
	return other.y*max(z, floor(length(f.xy)*f.z) / dot(f, f)) / abs(v);
}

vec3 trace(vec3 ro, vec3 rd,int march)
{
	float dist = 0.0;
	float m = 0.0;
	float d = 0.0;
	const float MAX_DISTANCE = 80.0;
	for (int i = 0; i < march; ++i) {
		d = scene(ro + rd * dist);
		if (d < 0.001) { break; }
		if (dist > MAX_DISTANCE) { break; }
		dist += d;
		m += 1.;
	}
	return vec3(dist,m,d);
}


void main(void) {

	vec2 pos = 2.0 * gl_FragCoord.xy / parameters.xy - 1.0;
	pos.x *= parameters.x / parameters.y;
	//ray origin
	float time = parameters.z;
	vec3 camPos;
	if (time < 10.5)
	{
		camPos = vec3(5.0*cos(time*0.3), 2.3*sin(time*0.1), 0.25*sin(time*0.25) + 0.75);
	}
	else if (time < 16.)
	{
		camPos = vec3(5.0*cos(time*0.3), 2.5*sin(time*0.1), 0.25*sin(time*0.25) + 0.75);
	}
	else if (time < 18.0)
	{
		camPos = vec3(5.0*cos(time*0.1), 5.0*sin(time*0.1), 0.75*sin(time*0.25) + 0.75);
	}
	else if (time < 26.)
	{
		camPos = vec3(5.0*cos(time*0.1), 1.0*sin(time*0.1), 0.75*sin(time*0.25) + 0.75);
	}
	else if (time < 40.)
	{
		camPos = vec3(6.0*cos(time*0.1), 1.0*sin(time*0.1), 0.75*sin(time*0.25) + 0.75);
	}
	else if (time < 47.)
	{
		camPos = vec3(6.1*cos(time*0.1), 1.2*sin(time*0.1), 0.15*sin(time*0.25) + 0.75);
	}
	if (sceneid == 2)
	{
		camPos = vec3(5.0*cos(time*0.1), 5.0*sin(time*0.1), 0.25*sin(parameters.z*0.25) + 0.75);
	}
	if (sceneid == 3)
	{
		camPos = vec3(4.0*cos(time*0.1), 1.0*sin(time*0.1), 0.25*sin(time*0.15) + 0.55);
	}
	if (sceneid == 4)
	{
		camPos = vec3(4.0*cos(time*0.1), 1.0*sin(time*0.1), 0.25*sin(time*0.15) + 0.55);
	}
	vec3 camDir = normalize(camPos*vec3(-1.0, -1.0, sin(parameters.z*0.33)*2.5));
	vec3 camUp = normalize(vec3(0.0, 1.0, 1.0));

	vec3 camSide = cross(camDir, camUp);
	float focus = 0.8;
	// ray direction
	vec3 rd = normalize(camSide*pos.x + camUp*pos.y + camDir*focus);
	vec3 ro = camPos;


	vec3 render = trace(ro, rd,80);
	float dist = render.x;
	float m = render.y;
	float c = (dist)*.001;
	vec2 uv = gl_FragCoord.xy / parameters.xy;
	float wobble = 0.;
	if (other.w == 1)wobble = clamp(0.7 + 0.5 * abs(sin(parameters.z*3.0)),.8, 1. );
	vec3 c0 = vec3(sin(uv.x*2. - 0. + parameters.z*1.), sin(uv.y*2. - 4.0 - parameters.z*1.), sin(uv.x*2. - 4. + parameters.z*1.));
	float a = pow(sin(uv.x*3.1416), 0.9)*pow(sin(uv.y*3.1416), 0.9);
	vec4 col = mix(vec4(vec3(a), 1.0), vec4(c0, 1.), 0.1);
	col.rgb = mix(col.rgb, vec3(length(col.rgb)*.5), wobble);
	vec4 result = vec4(vec3(c*col.x, c*col.y, c*col.z)*m, 1.);
	out_color = result;
}
);