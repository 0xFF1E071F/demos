float time_res[4] = { scenetime, window_xr, window_yr, 0. };
	glProgramUniform4fv(tv.program.fsid, 2, 1, time_res);
	float frame_ctrls[4] = {frameLimit,frameShape,frameSharpness,0.};
	glProgramUniform4fv(tv.program.fsid, 3, 1, frame_ctrls);
	float strip_ctrls[4] = { strp_cnt, strp_trnsinst,0., 0. };
	glProgramUniform4fv(tv.program.fsid, 4, 1, strip_ctrls);
	float tv_artifacts1[4] = { flip_y, tv_artifacts, toblack, noisemix };
	glProgramUniform4fv(tv.program.fsid, 5, 1, tv_artifacts1);
	glProgramUniform1i(tv.program.fsid, 6, godrays);
	glProgramUniform1i(tv.program.fsid, 7, sceneid);



const char* postproc_shader = GLSL(
\n#version 430\n
in vec2 ftexcoord;
layout(location = 0) out vec4 FragColor;
layout(location = 1) uniform sampler2D mytexture;
layout(location = 2) uniform vec4 time_resolution;
layout(location = 3) uniform vec4 frame;
layout(location = 4) uniform vec4 strips;
layout(location = 5) uniform vec4 tv_artifacts;
layout(location = 6) uniform int godrays;
layout(location = 7) uniform int sceneid;


float rand_vec2(vec2 co)
{
	float a = 12.9898;
	float b = 78.233;
	float c = 43758.5453;
	float dt = dot(co.xy, vec2(a, b));
	float sn = mod(dt, 3.14);
	return fract(sin(sn) * c);
}
float rand_vec3(vec3 co)
{
	float a = 12.9898;
	float b = 78.233;
	float c = 58.5065;
	float d = 43758.5453;
	float dt = dot(co.xyz, vec3(a,b,c));
	float sn = mod(dt, 3.14);
	return fract(sin(sn) * d);
}
float rand(float x) { return fract(sin(mod(dot(x, 12.9898),3.14)) * 43758.5453); }

vec4 strip_process(vec2 coords, sampler2D image)
{
	float stripeId = floor(coords.y * max(1.0, strips.x)) / max(1.0, strips.x);
	float stripeRand = rand_vec2(vec2(0.0, -stripeId));
	float stripeOffset = rand_vec2(vec2(0.0, stripeId)) * strips.y;
	vec2 texCoords = vec2(mod(coords.x + stripeOffset * 0.25, 1.0), coords.y + min(1.0, 1.0 + mod(coords.x + stripeOffset * 0.25, 1.0)) - 1.0);
	vec4 img = texture2D(image, texCoords);
	return img;
}

float s(float v, float t, float f)
{
	float r = step(t, v) - step(f, v);
	float e = (v - t) / (f - t)*r;
	return(1. - e)*r;
}


void main()
{
	vec2 uv = gl_FragCoord.xy / time_resolution.yz;
	uv.y = 1.0 - uv.y;
	vec2 p = -1.0 + 2.0*uv;
	vec2 uv_q = uv;
	vec2 uv_n = uv_q;
	mat3 rgbtoyuv = mat3(0.299, -0.147, 0.615, 0.587, -0.289, -0.515, 0.114, 0.436, -0.100);
	mat3 yuvtorgb = mat3(1.000, 1.000, 1.000, 0.000, -0.395, 2.032, 1.140, -0.581, 0.000);
	float shade = 1.0;
	shade -= rand(uv_q.x * 0.1 + uv_q.y * 50.0 + time_resolution.x) * 0.5;

	if (tv_artifacts.y == 2.)
	{
		uv_n.y += rand(time_resolution.x * 12.) * 0.004;
		// small scanline-based X-position noise = tape wrinkles	
		uv_n.x += rand(uv_q.y*39.0 + time_resolution.x * 20.0) * 0.01044 - 0.012;
		// global sinus wobbling
		float xsin = sin(time_resolution.x * 10.0 + uv_q.y * 9.0);
		float fugran = rand(time_resolution.x* 235.0);
		uv_n.x += xsin * clamp(fugran - 0.91, 0.0, 2.0) * 2.5;
		float xsin3 = sin(time_resolution.x * 5.0 + uv_q.y * 12.0);
		float fugran3 = rand(time_resolution.x* 235.0);
		uv_n.x += xsin3 * clamp(fugran3 - 0.94, 0.0, 1.0) * 0.5;
		// y poition jumping
		float fugran2 = rand(time_resolution.x * 511.0);
		uv_n.y += clamp(fugran2 - 0.98, -0.1, 1.0) * 0.01;
		// x-position noise = little tape jitter 
		uv_n.x += rand(dot(uv_q, vec2(10.0, 56.0)) + time_resolution.x * 121.0) * .013;
	}

	vec3 yuv = vec3(0.0);
	float fix = 0.3;
	float lumadelay = -0.002;

	// chroma bleed wobbling
	if (tv_artifacts.y == 1.)
	{
		fix = 0.7;
		fix += sin(time_resolution.x  * 2.3) * 0.2;
		fix += sin(time_resolution.x  * 5.52) * 0.1;
		fix += sin(time_resolution.x  * 23.0) * 0.1;
		fix += rand(uv_q.y*59.0 + time_resolution.x  * 40.0) * 0.4;
		fix *= 0.5;
		lumadelay = -0.005 + rand(uv_q.y*45. + time_resolution.x  * 23.0) * 0.003;
	}

	for (int x = 10; x >= 0; x -= 1)
	{
		float xx = float(x) / 10.0;
		if (xx < 0.0) xx = 0.0;
		float x1 = (xx * -0.05)* fix + lumadelay;
		float x2 = (xx * 0.1)* fix + lumadelay;
		vec3 mult = (vec3(1.0) - pow(vec3(xx), vec3(0.2, 1.0, 1.0))) * 0.2;
		vec2 uv1 = uv_n + vec2(x1, 0.0);
		vec2 uv2 = uv_n + vec2(x2, 0.0);
		yuv += (rgbtoyuv * strip_process(uv1, mytexture).rgb) * mult;
		yuv += (rgbtoyuv * strip_process(uv2, mytexture).rgb) * mult;
	}
	yuv.r = yuv.r * 0.2 + (rgbtoyuv * strip_process(uv_n, mytexture).rgb).r * 0.8;

	if (tv_artifacts.y > 0.5)
	{
		// turn to grayscale when tape is really bad
		float runran = rand(time_resolution.x * 666.0);
	if (runran > 0.91)
			yuv.gb = vec2(0.0);
	float noiseamount = 0.0;
		float noiseenable = max(0.0, rand(time_resolution.x * 440.0 + uv.y * 440.0) - 0.995) / 0.015;
		if (noiseenable > 0.5)
			yuv.gb = vec2(0.0);
		noiseamount = (0.5 + sin(uv.x * 3.0 + time_resolution.x * 10.0) * 0.5) * noiseenable;
		yuv.r = mix(yuv.r, rand(time_resolution.x * 11. + uv_n.x * 13. + uv_n.y * 12.), noiseamount);
	}
	vec4 col = vec4(0.0);
	col.rgb = yuvtorgb * yuv * shade;
	if (tv_artifacts.y > 0.5)
	{
		float mod_factor = uv_n.y *  time_resolution.y *  time_resolution.y / time_resolution.y;
		vec3 dotMaskWeights = mix(vec3(1.0, 0.7, 1.0), vec3(0.7, 1.0, 0.7), floor(mod(mod_factor, 2.0)));
		col.rgb *= dotMaskWeights;
	}

	vec3  inputs = vec3(gl_FragCoord.xy, time_resolution.x); // Spatial and temporal inputs
	float rand1 = rand_vec3(inputs);              // Random per-pixel value
	if (godrays == 1)
	{
		vec2 tc = gl_FragCoord.xy / time_resolution.yz;
		vec2 deltaTexCoord = tc;
		if (time_resolution.x < 49.)
		{
			//6.1*cos(time*0.1), 1.2*sin(time*0.1), 0.15*sin(time*0.25) + 0.75)	
		deltaTexCoord = tc + vec2(clamp(cos(time_resolution.x*.17), -.4, .5), clamp(sin(time_resolution.x*.09), -.3, .4)) - .5;
		}
		if (time_resolution.x < 57.)
		{
			//6.1*cos(time*0.1), 1.2*sin(time*0.1), 0.15*sin(time*0.25) + 0.75)
			deltaTexCoord = tc + vec2(clamp(cos(time_resolution.x*.1), -.3, .5), 0.) - .5;
		}
		else if (time_resolution.x <70.)
		{
			deltaTexCoord = tc + vec2(sin(time_resolution.x*0.3), 0.5) - .5;
		}



		deltaTexCoord *= vec2(1.0 / float(50)  * 0.926);
		tc += deltaTexCoord *rand1;
		float illuminationDecay = 1.0;
		vec4 color = texture2D(mytexture, tc.xy)*0.305104;
		for (int i = 0; i < 50; i++)
		{
			tc -= deltaTexCoord;
			vec4 sample1 = texture2D(mytexture, tc)*0.305104;
			sample1 *= illuminationDecay * 0.58767;
			color += sample1;
			illuminationDecay *= 0.96815;
		}
		col += color*0.31;
	}
	
	vec4 noise = vec4(rand1, rand1, rand1, 1.0);
	col.rgb = mix(col.rgb, noise.rgb, tv_artifacts.w);
	float f = (1.0 - p.x *p.x) * (1.0 - p.y *p.y);
	float frame1 = clamp(frame.z * (pow(f, frame.y) - frame.x), 0.0, 1.0);
	col.rgb *= frame1;
	col.rgb -= tv_artifacts.z;
	if (tv_artifacts.z > 0.95)col.rgb = vec3(0.0);
	FragColor = vec4(col.rgb, 1.0);
}
);